// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.driveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class ClaytonDrive extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final driveTrain m_driveTrain;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public ClaytonDrive(driveTrain subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_driveTrain = subsystem;
        addRequirements(m_driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        double y =(-1)*(RobotContainer.getInstance().getdriverJoystick().getRawAxis(1));
        double x =RobotContainer.getInstance().getdriverJoystick().getRawAxis(0);
        double rotation =RobotContainer.getInstance().getdriverJoystick().getRawAxis(2);
        boolean halfFinesseMode = RobotContainer.getInstance().getdriverJoystick().getRawButton(5);
        boolean thirdFinesseMode = RobotContainer.getInstance().getdriverJoystick().getRawButton(3);
        double deadband = .2;
        double finnesseValue=1;
        int delinearization = 3;
        if (Math.abs(x) < deadband){
            x = 0;
        }
        if (Math.abs(y) < deadband){
            y = 0;
        }
        if (Math.abs(rotation) < deadband){
            rotation = 0;
        }
        x = Math.pow(x,delinearization);
        y = Math.pow(y,delinearization);
        rotation = Math.pow(rotation,delinearization);
        if (halfFinesseMode){
            finnesseValue*=.5;
        }
        if (thirdFinesseMode){
            finnesseValue*=.33;
        }
        m_driveTrain.drive(finnesseValue*x, finnesseValue*y, finnesseValue*rotation);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
