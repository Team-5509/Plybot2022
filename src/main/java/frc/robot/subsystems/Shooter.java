// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Shooter extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
  

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    
    */
    private WPI_TalonSRX ShooterMotor;
    private final static double MAXSHOOTERSPEED = 292;
    private static int timeout = 30;
    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    ShooterMotor= new WPI_TalonSRX(2);
    ShooterMotor.configFactoryDefault();
    ShooterMotor.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, timeout);
    ShooterMotor.config_kF(0, 3.0);
    //ShooterMotor.config_kP(0, .1);
    ShooterMotor.config_kI(0, .01);



    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        double shooterVelocity = ShooterMotor.getSelectedSensorVelocity(0);
        SmartDashboard.putNumber("Shooter velocity", shooterVelocity);
        double error = ShooterMotor.getClosedLoopError(0);
        SmartDashboard.putNumber("Shooter Error", error);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
public void shoot(double percentSpeed){
    //ShooterMotor.set(ControlMode.PercentOutput, percentSpeed);
    ShooterMotor.set(ControlMode.Velocity,percentSpeed*MAXSHOOTERSPEED);
   
} 
public void stop(){
    ShooterMotor.set(ControlMode.PercentOutput, 0);

}
}

